<!DOCTYPE html>
<html>
    <head>
        <title>Impinj Simulator</title>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <meta name="description" content="justangon's blog">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          .info {
            font-family: courier;
            line-height: 25px;
            height: 400px;
            overflow-y: scroll;
            overflow: auto;
          }
          .info:before {
            content: "Console Output";
            color: #fff;
            padding: 5px 0;
            background: #555;
            display: block;
          }
          .tags {
            margin: 0 0 10px 0;
          }
          .tag {
            margin: 10px;
            display: inline-block;
          }
        </style>
    </head>
    <body>
      <div id="main" class="main">
      <h1>Simulate Read Tag</h1>
      <div class="tags"></div>
      <div class="info"></div>
    </div>
    <script src="/js/socket.io.js"></script>
    <script src="/js/fetch.js"></script>
    <script>
      var epcs = ['e00000000000000000000001', 'e00000000000000000000002', 'e00000000000000000000003', 'e00000000000000000000004', 'e00000000000000000000005', 'e00000000000000000000006', 'e00000000000000000000007', 'e00000000000000000000008', 'e00000000000000000000009', 'e00000000000000000000010', 'e0000000000000000000000a', 'e0000000000000000000000b', 'e0000000000000000000000c', 'e0000000000000000000000d', 'e0000000000000000000000e', 'e0000000000000000000000f', 'e0000000000000000000000g', 'e0000000000000000000000h', 'e0000000000000000000000i', 'e0000000000000000000000j']
      var tags = document.querySelector('.tags')
      var info = document.querySelector('.info')
      for (var i = 0; i < epcs.length; i += 1) {
         tags.innerHTML += '<div class="tag">' + epcs[i] + ' <button onClick="addEntry(this)" data-epc=' + epcs[i]+ '>發送</button></div>'
      }
      var controlReaderFromSocketIo = function (args) {
        println(args)
        var command = args.command;
        var eventId = args.eventId;
        var raceId = args.raceId;
        var result = controlReader(command, eventId, raceId)
        return result
      }
      var mReader = {
        isSingulating: false,
        getIsSingulating: function () {
          return this.isSingulating
        },
        start: function () {
          this.isSingulating = true
        },
        stop: function () {
          this.isSingulating = false
        }
      }
      var mApiHost = 'http://localhost:1337'
      var mSocketId
      var socketio = io(mApiHost);
      var mEventId = ''
      var mRaceId = ''
      var controlReader = function (command, eventId, raceId) {
        var rs = {
          type: 'readerstatus',
          payload: {
            message: '',
            error: false,
            isSingulating: false,
            raceId: undefined,
            debugMode: false,
            logFile: ''
          }
        }
        var isSingulating = mReader.getIsSingulating()
        if (command === 'STOP') {
          if (!isSingulating) {
            rs.payload.message = 'Already stopped. Ignoring stop command'
            rs.payload.error = true
          }
          mReader.stop()
          mEventId = ''
          mRaceId = ''
        } else if (command === 'DEBUG' || command === 'START') {
          if (isSingulating) {
            rs.payload.message = 'Already started. Ignoring start command'
            rs.payload.error = true
          }
          if (command === 'DEBUG') {
            rs.payload.debugMode = true
          }
          rs.payload.raceId = raceId
          rs.payload.message = 'starting reader'
          mReader.start()
          mEventId = eventId
          if (raceId) {
            mRaceId = raceId
          }
        } else if (command === 'STATUS') {
          rs.payload.message = 'Reader status'
        } else {
          rs.payload.message = 'Unknown command: ' + command
        }
        rs.payload.isSingulating = mReader.getIsSingulating()
        return rs
      }
      var addEntry = function (btn) {
        var record = {
          epc: undefined,
          timestamp: Date.now(),
          ant: 1,
          signal: '0.0dbm'
        }
        var output
        if (mReader.getIsSingulating()) {
          record.epc = btn.dataset.epc
          sendResult(record)
        } else {
          println('(not singulating)')
        }
      }
      var sendResult = function (record) {
        var txData = {
          type: '',
          payload: {
            eventId: mEventId,
            raceId: mRaceId,
            records: []
          }
        }
        var header = { method: 'post', credentials: 'same-origin', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }}
        if (mRaceId === '') {
          txData.type = 'txdata_test'
        } else {
          txData.type = 'txdata'
        }
        txData.payload.records.push(record)
        header.body = JSON.stringify(txData)
        println(txData)
        fetch(mApiHost + '/api/socket/impinj?sid=' + mSocketId, header)
      }
      var println = function (output) {
        console.log(output)
        info.innerHTML += '<div>' + JSON.stringify(output) + '</div>'
      }

      println('Try to connect to socket:')
      socketio.on('connect', function () {
        mSocketId = socketio.id
        println('Connected to socket: ' + mApiHost + '. socket ID: ' + mSocketId)
        fetch('/api/socket/impinj?sid=' + mSocketId, {credentials: 'same-origin'})
      })
      socketio.on('readercommand', function (args) {
        var body = controlReaderFromSocketIo(args)
        var header = { method: 'post', credentials: 'same-origin', headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' }, body: JSON.stringify(body) }
        println(body)
        fetch(mApiHost + '/api/socket/impinj?sid=' + mSocketId, header)
      })
    </script>
    </body>
</html>
